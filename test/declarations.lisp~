;;;; declarations.lisp
;;;;
;;;; Copyright 2018 Alexander Gutev
;;;;
;;;; Permission is hereby granted, free of charge, to any person
;;;; obtaining a copy of this software and associated documentation
;;;; files (the "Software"), to deal in the Software without
;;;; restriction, including without limitation the rights to use,
;;;; copy, modify, merge, publish, distribute, sublicense, and/or sell
;;;; copies of the Software, and to permit persons to whom the
;;;; Software is furnished to do so, subject to the following
;;;; conditions:
;;;;
;;;; The above copyright notice and this permission notice shall be
;;;; included in all copies or substantial portions of the Software.
;;;;
;;;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
;;;; EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
;;;; OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
;;;; NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
;;;; HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
;;;; WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
;;;; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
;;;; OTHER DEALINGS IN THE SOFTWARE.

(in-package :cl-environments.test)

(plan 9)


(let ((env (make-instance 'environment)))
  (flet ((test-binding (var type var-type)
	   (let ((binding (variable-binding var env)))	     
	     (ok binding (format nil "Variable binding ~s added" var))

	     (when binding
	       (is (type binding) type (format nil "Binding type of ~s is ~s" var type))
	       (is (cdr (assoc 'type (declarations binding))) var-type
		   (format nil "Declared type of ~s is ~s" var var-type))))))
	   
    (add-variable 'x env :type :lexical :local t)
  
    (walk-declaration 'type '(number x y z) env)

    (test-binding 'x :lexical 'number)
    (test-binding 'y nil 'number)
    (test-binding 'z nil 'number)))


(finalize)
